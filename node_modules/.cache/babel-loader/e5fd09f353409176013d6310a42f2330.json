{"ast":null,"code":"var _jsxFileName = \"/Users/donghao/Documents/starlink/src/components/WorldMap.js\";\nimport React, { Component } from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport * as d3Scale from 'd3-scale';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { timeFormat as d3TimeFormat } from 'd3-time-format';\nimport { Spin } from \"antd\";\nimport { WORLD_MAP_URL, SAT_API_KEY, SATELLITE_POSITION_URL } from \"../constants\";\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      map: null,\n      color: d3Scale.scaleOrdinal(schemeCategory10),\n      isLoad: false\n    };\n    this.refMap = React.createRef();\n    this.refTrack = React.createRef();\n  }\n\n  componentDidMount() {\n    axios.get(WORLD_MAP_URL).then(res => {\n      const {\n        data\n      } = res;\n      const land = feature(data, data.objects.countries).features;\n      this.generateMap(land);\n    }).catch(e => console.log('err in fecth world map data ', e));\n  }\n\n  generateMap(land) {\n    const projection = geoKavrayskiy7().scale(170).translate([width / 2, height / 2]).precision(.1);\n    const graticule = geoGraticule();\n    const canvas = d3Select(this.refMap.current).attr(\"width\", width).attr(\"height\", height);\n    const canvas2 = d3Select(this.refTrack.current).attr(\"width\", width).attr(\"height\", height);\n    let context = canvas.node().getContext(\"2d\");\n    let context2 = canvas2.node().getContext(\"2d\");\n    let path = geoPath().projection(projection).context(context);\n    land.forEach(ele => {\n      context.fillStyle = '#B3DDEF';\n      context.strokeStyle = '#000';\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke();\n      context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke();\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n    this.setState({\n      map: {\n        projection: projection,\n        graticule: graticule,\n        context: context,\n        context2: context2\n      }\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.satData !== prevProps.satData) {\n      const {\n        observerLat,\n        observerLong,\n        duration\n      } = this.props.observerData;\n      const startTime = duration[0] * 60,\n            endTime = duration[1] * 60;\n      const urls = this.props.satData.map(sat => {\n        const {\n          satid\n        } = sat; //fetch many satellite positions, get all urls\n\n        const url = `${SATELLITE_POSITION_URL}/${satid}/${observerLat}/${observerLong}/${startTime}/${endTime}/&apiKey=${SAT_API_KEY}`;\n        return axios.get(url);\n      }); //console.log('urls ->', urls)\n\n      this.setState(() => ({\n        isLoad: true\n      }));\n      axios.all(urls).then(axios.spread((...args) => {\n        return args.map(item => item.data);\n      })).then(res => {\n        console.log(res);\n        this.track(res);\n        this.setState(() => ({\n          isLoad: false\n        }));\n      }).catch(e => {\n        console.log('error in fetch satellite position');\n        alert('error in fetch satellite position' + e);\n      });\n    }\n  }\n\n  track(data) {\n    console.log('data -> ', data);\n\n    if (!data[0].positions) {\n      throw new Error(\"...\");\n      return;\n    }\n\n    const {\n      duration\n    } = this.props.observerData;\n    const len = data[0].positions.length;\n    const {\n      context2\n    } = this.state.map;\n    let now = new Date();\n    let i = 0;\n    let timer = setInterval(() => {\n      let timePassed = Date.now() - now;\n\n      if (i === 0) {\n        now.setSeconds(now.getSeconds() + duration[0] * 60);\n      }\n\n      let time = new Date(now.getTime() + 60 * timePassed);\n      context2.clearRect(0, 0, width, height);\n      context2.font = \"bold 14px sans-serif\";\n      context2.fillStyle = \"#333\";\n      context2.textAlign = \"center\";\n      context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n      if (i >= len) {\n        clearInterval(timer);\n        return;\n      }\n\n      data.forEach(sat => {\n        const {\n          info,\n          positions\n        } = sat;\n        this.drawSat(info, positions[i]);\n      });\n      i += 60;\n    }, 1000);\n  }\n\n  drawSat(sat, pos) {\n    const name = sat.satname.split('-')[1];\n    const {\n      projection,\n      context2\n    } = this.state.map;\n    const xy = projection([pos.satlongitude, pos.satlatitude]);\n    context2.fillStyle = this.state.color(name);\n    context2.beginPath();\n    context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n    context2.fill();\n    context2.font = \"bold 11px sans-serif\";\n    context2.textAlign = \"center\";\n    context2.fillText(name, xy[0], xy[1] + 14);\n  }\n\n  render() {\n    const {\n      isLoad\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }, isLoad ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spinner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Spin, {\n      tip: \"Loading...\",\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 29\n      }\n    })) : null, /*#__PURE__*/React.createElement(\"canvas\", {\n      className: \"map\",\n      ref: this.refMap,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"canvas\", {\n      className: \"track\",\n      ref: this.refTrack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/donghao/Documents/starlink/src/components/WorldMap.js"],"names":["React","Component","feature","axios","geoKavrayskiy7","geoGraticule","geoPath","select","d3Select","d3Scale","schemeCategory10","timeFormat","d3TimeFormat","Spin","WORLD_MAP_URL","SAT_API_KEY","SATELLITE_POSITION_URL","width","height","WorldMap","constructor","state","map","color","scaleOrdinal","isLoad","refMap","createRef","refTrack","componentDidMount","get","then","res","data","land","objects","countries","features","generateMap","catch","e","console","log","projection","scale","translate","precision","graticule","canvas","current","attr","canvas2","context","node","getContext","context2","path","forEach","ele","fillStyle","strokeStyle","globalAlpha","beginPath","fill","stroke","lineWidth","outline","setState","componentDidUpdate","prevProps","prevState","snapshot","props","satData","observerLat","observerLong","duration","observerData","startTime","endTime","urls","sat","satid","url","all","spread","args","item","track","alert","positions","Error","len","length","now","Date","i","timer","setInterval","timePassed","setSeconds","getSeconds","time","getTime","clearRect","font","textAlign","fillText","clearInterval","info","drawSat","pos","name","satname","split","xy","satlongitude","satlatitude","arc","Math","PI","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {feature} from 'topojson-client';\nimport axios from 'axios';\nimport {geoKavrayskiy7} from 'd3-geo-projection';\nimport {geoGraticule, geoPath} from 'd3-geo';\nimport {select as d3Select} from 'd3-selection';\nimport * as d3Scale from 'd3-scale';\nimport {schemeCategory10} from 'd3-scale-chromatic';\nimport {timeFormat as d3TimeFormat} from 'd3-time-format';\nimport {Spin} from \"antd\";\n\nimport {WORLD_MAP_URL, SAT_API_KEY, SATELLITE_POSITION_URL} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n    constructor() {\n        super();\n        this.state = {\n            map: null,\n            color: d3Scale.scaleOrdinal(schemeCategory10),\n            isLoad: false\n        }\n        this.refMap = React.createRef();\n        this.refTrack = React.createRef();\n    }\n\n    componentDidMount() {\n        axios.get(WORLD_MAP_URL).then(res => {\n                const {data} = res;\n                const land = feature(data, data.objects.countries).features;\n                this.generateMap(land);\n            })\n            .catch(e => console.log('err in fecth world map data ', e))\n    }\n\n    generateMap(land) {\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(.1);\n\n        const graticule = geoGraticule();\n\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const canvas2 = d3Select(this.refTrack.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        let context = canvas.node().getContext(\"2d\");\n        let context2 = canvas2.node().getContext(\"2d\");\n\n        let path = geoPath()\n            .projection(projection)\n            .context(context);\n\n        land.forEach(ele => {\n            context.fillStyle = '#B3DDEF';\n            context.strokeStyle = '#000';\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n        })\n\n\n        this.setState({\n            map: {\n                projection: projection,\n                graticule: graticule,\n                context: context,\n                context2: context2\n            }\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.satData !== prevProps.satData) {\n            const {observerLat, observerLong, duration} = this.props.observerData;\n\n            const startTime = duration[0] * 60, endTime = duration[1] * 60;\n            const urls = this.props.satData.map(sat => {\n                const {satid} = sat;\n                //fetch many satellite positions, get all urls\n                const url = `${SATELLITE_POSITION_URL}/${satid}/${observerLat}/${observerLong}/${startTime}/${endTime}/&apiKey=${SAT_API_KEY}`;\n                return axios.get(url);\n            });\n            //console.log('urls ->', urls)\n\n            this.setState(() => ({isLoad: true}));\n            axios.all(urls).then(\n                    axios.spread((...args) => {\n                        return args.map(item => item.data)\n                    })\n                )\n                .then(res => {\n                    console.log(res)\n                    this.track(res);\n                    this.setState(() => ({isLoad: false}));\n                })\n                .catch(e => {\n                    console.log('error in fetch satellite position');\n                    alert('error in fetch satellite position' + e);\n                })\n\n        }\n    }\n\n    track(data) {\n        console.log('data -> ', data)\n        if(!data[0].positions) {\n            throw new Error(\"...\")\n            return\n        }\n        const {duration} = this.props.observerData;\n        const len = data[0].positions.length;\n        const {context2} = this.state.map;\n        let now = new Date();\n\n        let i = 0;\n        let timer = setInterval(() => {\n            let timePassed = Date.now() - now;\n\n            if (i === 0) {\n                now.setSeconds(now.getSeconds() + duration[0] * 60);\n            }\n            let time = new Date(now.getTime() + 60 * timePassed);\n            context2.clearRect(0, 0, width, height);\n\n            context2.font = \"bold 14px sans-serif\";\n            context2.fillStyle = \"#333\";\n            context2.textAlign = \"center\";\n            context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n            if (i >= len) {\n                clearInterval(timer);\n                return;\n            }\n            data.forEach(sat => {\n                const {info, positions} = sat;\n                this.drawSat(info, positions[i]);\n            })\n\n            i += 60;\n        }, 1000)\n    }\n\n    drawSat(sat, pos) {\n        const name = (sat.satname).split('-')[1];\n        const {projection, context2} = this.state.map;\n        const xy = projection([pos.satlongitude, pos.satlatitude]);\n\n        context2.fillStyle = this.state.color(name);\n        context2.beginPath();\n        context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n        context2.fill();\n\n        context2.font = \"bold 11px sans-serif\";\n        context2.textAlign = \"center\";\n        context2.fillText(name, xy[0], xy[1] + 14);\n    }\n\n    render() {\n        const {isLoad} = this.state;\n        return (\n            <div className=\"map-box\">\n                {\n                    isLoad ?\n                        <div className=\"spinner\">\n                            <Spin tip=\"Loading...\" size=\"large\"/>\n                        </div>\n                        :\n                        null\n                }\n                <canvas className=\"map\" ref={this.refMap}/>\n                <canvas className=\"track\" ref={this.refTrack}/>\n            </div>\n        );\n    }\n}\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}