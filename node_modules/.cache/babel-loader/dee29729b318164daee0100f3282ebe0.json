{"ast":null,"code":"var _jsxFileName = \"/Users/donghao/Documents/starlink/src/components/WorldMap.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Spin } from 'antd';\nimport { feature } from 'topojson-client';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport * as d3Scale from 'd3-scale';\nimport { timeFormat as d3TimeFormat } from 'd3-time-format';\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY } from '../constants';\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n\n    this.track = data => {\n      if (!data[0].hasOwnProperty('positions')) {\n        throw new Error('no position data');\n        return;\n      }\n\n      ;\n      const len = data[0].positions.length;\n      const {\n        duration: [startTime, endTime]\n      } = this.props.observerData;\n      const {\n        context2\n      } = this.map;\n      let now = new Date();\n      let i = startTime;\n      let timer = setInterval(() => {\n        let timePassed = Date.now() - now;\n\n        if (i === startTime) {\n          now.setSeconds(now.getSeconds() + startTime * 60);\n        }\n\n        let time = new Date(now.getTime() + 60 * timePassed);\n        context2.clearRect(0, 0, width, height);\n        context2.font = \"bold 14px sans-serif\";\n        context2.fillStyle = \"#333\";\n        context2.textAlign = \"center\";\n        context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n        if (i >= len) {\n          clearInterval(timer);\n          this.setState({\n            isDrawing: false\n          });\n          const oHint = document.getElementsByClassName('hint')[0];\n          oHint.innerHTML = '';\n          return;\n        }\n\n        data.forEach(sat => {\n          const {\n            info,\n            positions\n          } = sat;\n          this.drawSat(info, positions[i]);\n        });\n        i += 60;\n      }, 1000);\n    };\n\n    this.drawSat = (sat, pos) => {\n      const {\n        satlongitude,\n        satlatitude\n      } = pos;\n      const {\n        satname\n      } = sat;\n      const nameWithNumber = satname.match(/\\d+/g).join('');\n      if (!satlongitude || !satlatitude) return;\n      const {\n        projection,\n        context2\n      } = this.map;\n      const xy = projection([satlongitude, satlatitude]);\n      context2.fillStyle = this.color(nameWithNumber);\n      context2.beginPath();\n      context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n      context2.fill();\n      context2.font = \"bold 11px sans-serif\";\n      context2.textAlign = \"center\";\n      context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n    };\n\n    this.generateMap = land => {\n      const projection = geoKavrayskiy7().scale(170).translate([width / 2, height / 2]).precision(.1);\n      const graticule = geoGraticule();\n      const canvas = d3Select(this.refMap.current).attr(\"width\", width).attr(\"height\", height);\n      const canvas2 = d3Select(this.refTrack.current).attr(\"width\", width).attr(\"height\", height);\n      const context = canvas.node().getContext(\"2d\");\n      const context2 = canvas2.node().getContext(\"2d\");\n      let path = geoPath().projection(projection).context(context);\n      land.forEach(ele => {\n        context.fillStyle = '#B3DDEF';\n        context.strokeStyle = '#000';\n        context.globalAlpha = 0.7;\n        context.beginPath();\n        path(ele);\n        context.fill();\n        context.stroke();\n        context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n        context.beginPath();\n        path(graticule());\n        context.lineWidth = 0.1;\n        context.stroke();\n        context.beginPath();\n        context.lineWidth = 0.5;\n        path(graticule.outline());\n        context.stroke();\n      });\n      this.map = {\n        projection: projection,\n        graticule: graticule,\n        context: context,\n        context2: context2\n      };\n    };\n\n    this.state = {\n      isLoading: false,\n      isDrawing: false\n    };\n    this.map = null;\n    this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    this.refMap = React.createRef();\n    this.refTrack = React.createRef();\n  }\n\n  componentDidMount() {\n    axios.get(WORLD_MAP_URL).then(res => {\n      const {\n        data\n      } = res;\n      const land = feature(data, data.objects.countries).features;\n      this.generateMap(land);\n    }).catch(e => {\n      console.log('err in fetch map data ', e.message);\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.satData !== this.props.satData) {\n      const {\n        observerLat,\n        observerLong,\n        duration,\n        observerElevation\n      } = this.props.observerData;\n      const endTime = duration[1] * 60;\n      this.setState({\n        isLoading: true\n      });\n      const urls = this.props.satData.map(sat => {\n        const {\n          satid\n        } = sat;\n        const url = `${SATELLITE_POSITION_URL}/${satid}/${observerLat}/${observerLong}/${observerElevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n        return axios.get(url);\n      });\n      axios.all(urls).then(axios.spread((...args) => {\n        return args.map(item => item.data);\n      })).then(res => {\n        this.setState({\n          isLoading: false,\n          isDrawing: true\n        });\n\n        if (!prevState.isDrawing) {\n          this.track(res);\n        } else {\n          const oHint = document.getElementsByClassName('hint')[0];\n          oHint.innerHTML = 'Please wait for these satellite animation to finish before selection new ones!';\n        }\n      }).catch(e => {\n        console.log('err in fetch satellite position -> ', e.message);\n      });\n    }\n  }\n\n  render() {\n    const {\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spinner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Spin, {\n      tip: \"Loading...\",\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 29\n      }\n    })) : null, /*#__PURE__*/React.createElement(\"canvas\", {\n      className: \"map\",\n      ref: this.refMap,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"canvas\", {\n      className: \"track\",\n      ref: this.refTrack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hint\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/donghao/Documents/starlink/src/components/WorldMap.js"],"names":["React","Component","axios","Spin","feature","geoKavrayskiy7","geoGraticule","geoPath","select","d3Select","schemeCategory10","d3Scale","timeFormat","d3TimeFormat","WORLD_MAP_URL","SATELLITE_POSITION_URL","SAT_API_KEY","width","height","WorldMap","constructor","track","data","hasOwnProperty","Error","len","positions","length","duration","startTime","endTime","props","observerData","context2","map","now","Date","i","timer","setInterval","timePassed","setSeconds","getSeconds","time","getTime","clearRect","font","fillStyle","textAlign","fillText","clearInterval","setState","isDrawing","oHint","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","satname","nameWithNumber","match","join","projection","xy","color","beginPath","arc","Math","PI","fill","generateMap","land","scale","translate","precision","graticule","canvas","refMap","current","attr","canvas2","refTrack","context","node","getContext","path","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","state","isLoading","scaleOrdinal","createRef","componentDidMount","get","then","res","objects","countries","features","catch","e","console","log","message","componentDidUpdate","prevProps","prevState","snapshot","satData","observerLat","observerLong","observerElevation","urls","satid","url","all","spread","args","item","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport { Spin } from 'antd';\nimport { feature } from 'topojson-client';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport { schemeCategory10  } from 'd3-scale-chromatic';\nimport * as d3Scale from 'd3-scale';\nimport { timeFormat as d3TimeFormat } from 'd3-time-format';\n\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY } from '../constants';\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isLoading: false,\n            isDrawing: false,\n        };\n        this.map = null;\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\n        this.refMap = React.createRef();\n        this.refTrack = React.createRef();\n    }\n\n    componentDidMount() {\n        axios.get(WORLD_MAP_URL)\n            .then(res => {\n                const { data } = res;\n                const land = feature(data, data.objects.countries).features;\n                this.generateMap(land);\n            })\n            .catch( e => {\n                console.log('err in fetch map data ', e.message);\n            })\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevProps.satData !== this.props.satData) {\n            const { observerLat, observerLong, duration, observerElevation } = this.props.observerData;\n            const endTime = duration[1] * 60;\n            this.setState({\n                isLoading: true\n            });\n            const urls = this.props.satData.map( sat => {\n                const { satid } = sat;\n                const url = `${SATELLITE_POSITION_URL}/${satid}/${observerLat}/${observerLong}/${observerElevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n                return axios.get(url);\n            });\n\n            axios.all(urls)\n                .then(\n                    axios.spread((...args) => {\n                        return args.map(item => item.data);\n                    })\n                )\n                .then( res => {\n                    this.setState({\n                        isLoading: false,\n                        isDrawing: true\n                    });\n\n                    if(!prevState.isDrawing) {\n                        this.track(res);\n                    }else{\n                        const oHint = document.getElementsByClassName('hint')[0];\n                        oHint.innerHTML = 'Please wait for these satellite animation to finish before selection new ones!'\n                    }\n                })\n                .catch( e => {\n                    console.log('err in fetch satellite position -> ', e.message);\n                })\n        }\n    }\n\n    track = (data) => {\n        if(!data[0].hasOwnProperty('positions')){\n            throw new Error('no position data');\n            return;\n        };\n        const len = data[0].positions.length;\n        const { duration: [startTime, endTime] } = this.props.observerData;\n        const { context2 } = this.map;\n\n        let now = new Date();\n        let i = startTime;\n\n        let timer = setInterval( () => {\n            let timePassed = Date.now() - now;\n            if(i === startTime) {\n                now.setSeconds(now.getSeconds() + startTime * 60)\n            }\n            let time = new Date(now.getTime() + 60 * timePassed);\n            context2.clearRect(0, 0, width, height);\n            context2.font = \"bold 14px sans-serif\";\n            context2.fillStyle = \"#333\";\n            context2.textAlign = \"center\";\n            context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n            if(i >= len) {\n                clearInterval(timer);\n                this.setState({isDrawing: false});\n                const oHint = document.getElementsByClassName('hint')[0];\n                oHint.innerHTML = ''\n                return;\n            }\n            data.forEach( sat => {\n                const { info, positions } = sat;\n                this.drawSat(info, positions[i])\n            });\n\n            i += 60;\n        }, 1000)\n    }\n\n    drawSat = (sat, pos) => {\n        const { satlongitude, satlatitude } = pos;\n        const { satname } = sat;\n        const nameWithNumber = satname.match(/\\d+/g).join('');\n\n        if(!satlongitude || !satlatitude ) return;\n\n        const { projection, context2 } = this.map;\n        const xy = projection([satlongitude, satlatitude]);\n\n        context2.fillStyle = this.color(nameWithNumber);\n        context2.beginPath();\n        context2.arc(xy[0], xy[1], 4, 0, 2*Math.PI);\n        context2.fill();\n\n        context2.font = \"bold 11px sans-serif\";\n        context2.textAlign = \"center\";\n        context2.fillText(nameWithNumber, xy[0], xy[1]+14);\n    }\n\n    render() {\n        const { isLoading } = this.state;\n        return (\n            <div className=\"map-box\">\n                {\n                    isLoading ?\n                        <div className=\"spinner\">\n                            <Spin tip=\"Loading...\" size=\"large\"/>\n                        </div>\n                        :\n                        null\n                }\n                <canvas className=\"map\" ref={this.refMap}/>\n                <canvas className=\"track\" ref={this.refTrack}/>\n                <div className=\"hint\"></div>\n            </div>\n        );\n    }\n\n    generateMap = land => {\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(.1);\n\n        const graticule = geoGraticule();\n\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const canvas2 = d3Select(this.refTrack.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const context = canvas.node().getContext(\"2d\");\n        const context2 = canvas2.node().getContext(\"2d\");\n\n        let path = geoPath()\n            .projection(projection)\n            .context(context);\n\n        land.forEach( ele => {\n            context.fillStyle = '#B3DDEF';\n            context.strokeStyle = '#000';\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n        })\n\n        this.map = {\n            projection: projection,\n            graticule: graticule,\n            context: context,\n            context2: context2\n        }\n    }\n}\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}